<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <OutputType>WinExe</OutputType>
        <TargetFramework>net7.0-windows10.0.22621.0</TargetFramework>
        <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
        <RootNamespace>App</RootNamespace>
        <ApplicationManifest>app.manifest</ApplicationManifest>
        <Platforms>x86;x64;ARM64</Platforms>
        <RuntimeIdentifiers>win10-x86;win10-x64;win10-arm64</RuntimeIdentifiers>
        <PublishProfile>win10-$(Platform).pubxml</PublishProfile>
        <UseWinUI>true</UseWinUI>
        <EnableMsixTooling>true</EnableMsixTooling>
        <GenerateAppInstallerFile>False</GenerateAppInstallerFile>
        <AppxPackageSigningEnabled>True</AppxPackageSigningEnabled>
        <PackageCertificateThumbprint>3E52078B185090E4FF4754158BCE1EDA33591795</PackageCertificateThumbprint>
        <AppxPackageSigningTimestampDigestAlgorithm>SHA512</AppxPackageSigningTimestampDigestAlgorithm>
        <AppxAutoIncrementPackageRevision>True</AppxAutoIncrementPackageRevision>
        <AppxSymbolPackageEnabled>True</AppxSymbolPackageEnabled>
        <GenerateTestArtifacts>True</GenerateTestArtifacts>
        <AppxBundle>Always</AppxBundle>
        <AppxBundlePlatforms>x64</AppxBundlePlatforms>
        <HoursBetweenUpdateChecks>168</HoursBetweenUpdateChecks>
<!--        <UnpackagedDeployment>True</UnpackagedDeployment>-->
        <!--        Cannot run unpackaged app without this whether WAS installed or not-->
        <WindowsAppSDKSelfContained Condition="'$(UnpackagedDeployment)'=='True'">true</WindowsAppSDKSelfContained>
        <!--        <SelfContained>true</SelfContained>-->
        <!--<VcpkgTriplet>x64-windows</VcpkgTriplet>
        <VcpkgEnabled>true</VcpkgEnabled>
        <RestoreProjectStyle>PackageReference</RestoreProjectStyle>-->
    </PropertyGroup>
    <!--   Manually copy content files to output directories for running unpackaged app-->
    <Target Condition="'$(UnpackagedDeployment)'=='True'" Name="CopyBinaries" BeforeTargets="BeforeBuild">
        <CreateItem Include="$(MSBuildThisFileDirectory)../$(Platform)/$(Configuration)/*">
            <Output TaskParameter="Include" ItemName="CppBinaries"/>
        </CreateItem>
        <Copy SourceFiles="@(CppBinaries)" DestinationFolder="$(OutputPath)" SkipUnchangedFiles="true"/>
        <CreateItem Include="$(MSBuildThisFileDirectory)Assets/*">
            <Output TaskParameter="Include" ItemName="Assets"/>
        </CreateItem>
        <Copy SourceFiles="@(Assets)" DestinationFolder="$(OutputPath)Assets" SkipUnchangedFiles="true"/>
    </Target>

    <!--<Import Project="D:\VCMI\vcpkg\scripts\buildsystems\msbuild\vcpkg.props"/>
    <Import Project="D:\VCMI\vcpkg\scripts\buildsystems\msbuild\vcpkg.targets"/>-->
    <!--<ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
        <PostBuildEvent>
			<Command>
				echo off
				copy "D:\opencv\build\x64\vc16\bin\opencv_world470d.dll" "$(OutDir)"
				echo on
			</Command>
		</PostBuildEvent>
    </ItemDefinitionGroup>
    <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
        <PostBuildEvent>
            <Command>
                echo off
                copy "D:\opencv\build\x64\vc16\bin\opencv_world470.dll" "$(OutDir)"
                echo on
            </Command>
        </PostBuildEvent>
    </ItemDefinitionGroup>-->

    <ItemGroup>
        <None Remove="BlankPage1.xaml"/>
    </ItemGroup>

    <!--    Will be copied into AppX folder and msix during packaging-->
    <ItemGroup>
        <Content Include="Assets\SplashScreen.scale-200.png"/>
        <Content Include="Assets\LockScreenLogo.scale-200.png"/>
        <Content Include="Assets\Square150x150Logo.scale-200.png"/>
        <Content Include="Assets\Square44x44Logo.scale-200.png"/>
        <Content Include="Assets\Square44x44Logo.targetsize-24_altform-unplated.png"/>
        <Content Include="Assets\StoreLogo.png"/>
        <Content Include="Assets\Wide310x150Logo.scale-200.png"/>
        <Content Include="$(MSBuildThisFileDirectory)../$(Platform)/$(Configuration)/*"/>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.3.230331000"/>
        <PackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="10.0.22621.756"/>
        <Manifest Include="$(ApplicationManifest)"/>
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="../OpenCV/OpenCV.vcxproj"/>
    </ItemGroup>

    <!-- 
      Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
      Tools extension to be activated for this project even if the Windows App SDK Nuget
      package has not yet been restored.
    -->
    <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
        <ProjectCapability Include="Msix"/>
    </ItemGroup>
    <ItemGroup>
        <Page Update="WebView2Page.xaml">
            <Generator>MSBuild:Compile</Generator>
        </Page>
    </ItemGroup>

    <!-- 
      Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution 
      Explorer "Package and Publish" context menu entry to be enabled for this project even if 
      the Windows App SDK Nuget package has not yet been restored.
    -->
    <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
        <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
    </PropertyGroup>
</Project>
